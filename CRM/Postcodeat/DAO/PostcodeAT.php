<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from de.systopia.postcodeat/xml/schema/CRM/Postcodeat/PostcodeAT.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:748e57aa948281993b355177f31c866d)
 */
use CRM_Postcodeat_ExtensionUtil as E;

/**
 * Database access object for the PostcodeAT entity.
 */
class CRM_Postcodeat_DAO_PostcodeAT extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_postcodeat';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique PostcodeAT ID
   *
   * @var int|string|null
   *   (SQL type: int)
   *   Note that values will be retrieved from the database as a string.
   */
  public $id;

  /**
   * Municipality code
   *
   * @var string
   *   (SQL type: char(5))
   *   Note that values will be retrieved from the database as a string.
   */
  public $gemnr;

  /**
   * Municipality code 2
   *
   * @var string
   *   (SQL type: char(5))
   *   Note that values will be retrieved from the database as a string.
   */
  public $gemnr2;

  /**
   * Municipality name
   *
   * @var string
   *   (SQL type: char(50))
   *   Note that values will be retrieved from the database as a string.
   */
  public $gemnam38;

  /**
   * Town/village code
   *
   * @var string
   *   (SQL type: char(5))
   *   Note that values will be retrieved from the database as a string.
   */
  public $okz;

  /**
   * Town/village name
   *
   * @var string
   *   (SQL type: char(50))
   *   Note that values will be retrieved from the database as a string.
   */
  public $ortnam;

  /**
   * Street code
   *
   * @var string
   *   (SQL type: char(6))
   *   Note that values will be retrieved from the database as a string.
   */
  public $skz;

  /**
   * Street name
   *
   * @var string
   *   (SQL type: varchar(60))
   *   Note that values will be retrieved from the database as a string.
   */
  public $stroffi;

  /**
   * Street short name
   *
   * @var string
   *   (SQL type: varchar(50))
   *   Note that values will be retrieved from the database as a string.
   */
  public $strkurz;

  /**
   * ZIP code
   *
   * @var string
   *   (SQL type: char(4))
   *   Note that values will be retrieved from the database as a string.
   */
  public $plznr;

  /**
   * Municipality
   *
   * @var string
   *   (SQL type: varchar(75))
   *   Note that values will be retrieved from the database as a string.
   */
  public $zustort;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_postcodeat';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Postcode ATs') : E::ts('Postcode AT');
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('ID'),
          'description' => E::ts('Unique PostcodeAT ID'),
          'required' => TRUE,
          'where' => 'civicrm_postcodeat.id',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'gemnr' => [
          'name' => 'gemnr',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Gemnr'),
          'description' => E::ts('Municipality code'),
          'required' => TRUE,
          'maxlength' => 5,
          'size' => CRM_Utils_Type::SIX,
          'where' => 'civicrm_postcodeat.gemnr',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'gemnr2' => [
          'name' => 'gemnr2',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Gemnr2'),
          'description' => E::ts('Municipality code 2'),
          'required' => TRUE,
          'maxlength' => 5,
          'size' => CRM_Utils_Type::SIX,
          'where' => 'civicrm_postcodeat.gemnr2',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'gemnam38' => [
          'name' => 'gemnam38',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Gemnam38'),
          'description' => E::ts('Municipality name'),
          'required' => TRUE,
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_postcodeat.gemnam38',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'okz' => [
          'name' => 'okz',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Okz'),
          'description' => E::ts('Town/village code'),
          'required' => TRUE,
          'maxlength' => 5,
          'size' => CRM_Utils_Type::SIX,
          'where' => 'civicrm_postcodeat.okz',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'ortnam' => [
          'name' => 'ortnam',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Ortnam'),
          'description' => E::ts('Town/village name'),
          'required' => TRUE,
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_postcodeat.ortnam',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'skz' => [
          'name' => 'skz',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Skz'),
          'description' => E::ts('Street code'),
          'required' => TRUE,
          'maxlength' => 6,
          'size' => CRM_Utils_Type::SIX,
          'where' => 'civicrm_postcodeat.skz',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'stroffi' => [
          'name' => 'stroffi',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Stroffi'),
          'description' => E::ts('Street name'),
          'required' => TRUE,
          'maxlength' => 60,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_postcodeat.stroffi',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'strkurz' => [
          'name' => 'strkurz',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Strkurz'),
          'description' => E::ts('Street short name'),
          'required' => FALSE,
          'maxlength' => 50,
          'size' => CRM_Utils_Type::BIG,
          'where' => 'civicrm_postcodeat.strkurz',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'plznr' => [
          'name' => 'plznr',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Plznr'),
          'description' => E::ts('ZIP code'),
          'required' => TRUE,
          'maxlength' => 4,
          'size' => CRM_Utils_Type::FOUR,
          'where' => 'civicrm_postcodeat.plznr',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
        'zustort' => [
          'name' => 'zustort',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => E::ts('Zustort'),
          'description' => E::ts('Municipality'),
          'required' => FALSE,
          'maxlength' => 75,
          'size' => CRM_Utils_Type::HUGE,
          'where' => 'civicrm_postcodeat.zustort',
          'table_name' => 'civicrm_postcodeat',
          'entity' => 'PostcodeAT',
          'bao' => 'CRM_Postcodeat_DAO_PostcodeAT',
          'localizable' => 0,
          'html' => [
            'type' => 'Text',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'postcodeat', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'postcodeat', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
